Shader "Custom/Final Water Shader"
{
    Properties
    {
        _Color ("Color", Color) = (1,1,1,1)
        _MainTex ("Albedo (RGB)", 2D) = "white" {}
        _Glossiness ("Smoothness", Range(0,1)) = 0.5
        _Metallic ("Metallic", Range(0,1)) = 0.0
        _WaveHeight("Wave Height", Range(0,1)) = 0.1
        _WaveSpeed("Wave Speed", Range(0,2)) = 1.0
        _FresnelPower("Fresnel Power", Range(1,5)) = 2.0
        _FresnelIntensity("Fresnel Intensity", Range(0,1)) = 0.6
    }
    SubShader
    {
        Tags { "RenderType" = "Transparent" "Queue" = "Transparent"}
        LOD 200

        CGPROGRAM
        #pragma surface surf Standard fullforwardshadows
        #pragma target 3.0

        sampler2D _MainTex;

        struct Input
        {
            float2 uv_MainTex;
            float3 worldPos;
            float3 viewDir;
        };

        half _Glossiness;
        half _Metallic;
        fixed4 _Color;
        half _WaveHeight;
        half _WaveSpeed;
        half _FresnelPower;
        half _FresnelIntensity;

        void surf (Input IN, inout SurfaceOutputStandard o)
        {
            float wave1 = sin(IN.worldPos.x * _WaveSpeed + _Time.y) * cos(IN.worldPos.z * _WaveSpeed + _Time.y) * _WaveHeight;
            float wave2 = sin(IN.worldPos.x * _WaveSpeed * 1.25 + _Time.y * 1.1) * cos(IN.worldPos.z * _WaveSpeed * 1.25 + _Time.y * 1.1) * _WaveHeight * 0.8;
            float wave3 = cos(IN.worldPos.x * _WaveSpeed * 0.8 + _Time.y * 0.9) * sin(IN.worldPos.z * _WaveSpeed * 0.8 + _Time.y * 0.9) * _WaveHeight * 0.6;
            float wave4 = cos(IN.worldPos.x * _WaveSpeed * 0.6 + _Time.y * 1.2) * sin(IN.worldPos.z * _WaveSpeed * 0.6 + _Time.y * 1.2) * _WaveHeight * 0.7;

            // New wave for randomness
            float wave5 = sin(IN.worldPos.x * _WaveSpeed + _Time.y) * cos(IN.worldPos.z * _WaveSpeed * sin(_Time.y * 0.5) + _Time.y) * _WaveHeight;

            float waveSum = wave1 + wave2 + wave3 + wave4 + wave5;

            // Apply summed waves to UV for the wave effect
            fixed2 uv = IN.uv_MainTex;
            uv.y += waveSum;

            fixed4 c = tex2D(_MainTex, uv) * _Color;

            // Fresnel Effect
            half fresnel = pow(1.0 - dot(normalize(IN.viewDir), normalize(float3(0, 1, waveSum))), _FresnelPower);

            // Combining Fresnel and Albedo
            o.Albedo = lerp(c.rgb, _Color.rgb * _FresnelIntensity, fresnel);

            o.Metallic = _Metallic;
            o.Smoothness = _Glossiness;
            o.Alpha = c.a;

            // Wave modified normals
            o.Normal = normalize(float3(0, 1 - _WaveHeight, waveSum));
        }
        ENDCG
    }
    FallBack "Diffuse"
}
